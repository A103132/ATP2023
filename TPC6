{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### TPC6: Análise de dados: doença cardíaca\n",
    "\n",
    "Descarregue o ficheiro de dados: [diabetes_prediction_dataset.csv](./datasets/diabetes_prediction_dataset.csv.zip).\n",
    "\n",
    "Encontra mais informação sobre este conjunto de dados [aqui](https://www.kaggle.com/datasets/iammustafatz/diabetes-prediction-dataset).\n",
    "\n",
    "Crie um programa em Python, conjunto de funções, que responda às seguintes questões:\n",
    "* Crie uma função que lê a informação do ficheiro para um modelo, previamente pensado em memória;\n",
    "* Crie uma função que calcula a distribuição da doença por sexo (tenha atenção que indivíduos doentes e não doentes no dataset);\n",
    "* Crie uma função que calcula a distribuição da doença por escalões etários. Considere os seguintes escalões: [0-10], [11-24], [25-29], [30-34], [35-39], [40-44], ...\n",
    "* Crie uma função que calcula a distribuição da doença por níveis de glucose. Considere um nível igual a um intervalo de 10 unidades, comece no limite inferior e crie os níveis necessários até abranger o limite superior;\n",
    "* Crie uma função que imprime na forma de uma tabela uma distribuição;\n",
    "* Especifique um programa que ao executar apresenta as tabelas correspondentes às distribuições pedidas."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Que distribuição quer aceder:\n",
      "1. Distribuição por sexo\n",
      "2.Distribuição por idade\n",
      "3. Distribuição por nível de glucose\n",
      " 0: Sair\n",
      "Tabela de distribuição por idade\n",
      "--------------------------------\n",
      "[0,10]:0\n",
      "[11,24]:0\n",
      "[25-29]:0\n",
      "[30-34]:0\n",
      "[35-39]:0\n",
      "[40-44]:0\n",
      "[45-49]:0\n",
      "[50-54]:0\n",
      "[55-59]:0\n",
      "[60-64]:0\n",
      "[65-69]:0\n",
      "[70-74]:0\n",
      "[75-79]:0\n",
      "[80-84]:0\n",
      "[85-89]:0\n",
      "Programa encerrado\n"
     ]
    }
   ],
   "source": [
    "def Lerficheiro(fnome):\n",
    "    registo = open (fnome,\"r\")\n",
    "    linhas=registo.readlines()\n",
    "    ficheiro =[]\n",
    "    for linha in linhas[1:]:\n",
    "        info = linha.split(\",\")\n",
    "        gender = info[0]\n",
    "        age = float(info[1])\n",
    "        hypertension = info[2]\n",
    "        heart_disease = info[3]\n",
    "        smoking_history = info[4]\n",
    "        bmi = float(info[5])\n",
    "        HbA1c = float(info[6])\n",
    "        glucose = int(info[7])\n",
    "        diabetes = info[8]\n",
    "        ficheiro.append((gender,age,hypertension,heart_disease,smoking_history,bmi,HbA1c,glucose,diabetes))\n",
    "        registo.close()\n",
    "    return ficheiro\n",
    "        \n",
    "def distribuiçãoSexo(fnome):\n",
    "    Lerficheiro(fnome)\n",
    "    female_diab = []\n",
    "    male_diab = []\n",
    "    male_naod = []\n",
    "    female_naod = []\n",
    "    for linha in Lerficheiro(fnome):\n",
    "        if \"1\" in linha[-1]:\n",
    "            if linha[0] == \"Female\":\n",
    "                female_diab.append(linha[0])\n",
    "            else:\n",
    "                male_diab.append(linha[0])\n",
    "        else:\n",
    "            if linha[0] == \"Female\":\n",
    "                female_naod.append(linha[0])\n",
    "            else:\n",
    "                male_naod.append(linha[0])\n",
    "    print(\"Com Diabetes         Sem Diabetes\")\n",
    "    print(\"Female -\", len(female_diab), \"        Female -\", len(female_naod))\n",
    "    print(\"Male -\", len(male_diab), \"         Male -\", len(male_naod))\n",
    "\n",
    "def distribuiçãoIdade(fnome):\n",
    "    diabetes=[]\n",
    "    idade=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]    \n",
    "\n",
    "    for linha in Lerficheiro(fnome):\n",
    "        if linha [8]== 1:\n",
    "            if linha[1]==10:\n",
    "                idade[1]=idade[1]+1\n",
    "            else:\n",
    "                n = int(linha[1]/5)\n",
    "                idade[n]=idade[n]+1\n",
    "    indice=0\n",
    "    total=0\n",
    "    for v in idade:\n",
    "        total= total + int(v)\n",
    "        if indice == 1:\n",
    "            diabetes.append(\"[0,10]:\"+str(total))\n",
    "            total=0\n",
    "        if indice == 4:\n",
    "            diabetes.append(\"[11,24]:\"+str(total))\n",
    "            total=0\n",
    "        if indice > 4:\n",
    "            b=(indice*5)\n",
    "            a=b+4\n",
    "            diabetes.append(\"[\"+str(b)+\"-\"+str(a)+\"]:\"+str(total))\n",
    "            total=0\n",
    "        indice=indice+1\n",
    "       \n",
    "    for d in diabetes:\n",
    "        print (d)\n",
    "\n",
    "\n",
    "def distribuiçãoGlucose(fnome):\n",
    "    glucose=[]\n",
    "    gdiabetes=[]\n",
    "    menor=int(100000)\n",
    "    maior=int(0)\n",
    "    for linha in Lerficheiro(fnome):\n",
    "        if int(linha[7]) > maior:\n",
    "            maior=int(linha[7])\n",
    "        if int(linha[7]) < menor:\n",
    "            menor=int(linha[7])\n",
    "\n",
    "\n",
    "    g= menor\n",
    "    while g <= maior:\n",
    "        glucose.append(0)\n",
    "        g=g+10\n",
    "    \n",
    "    for linha in Lerficheiro(fnome):\n",
    "        if linha[8]==1:\n",
    "            n = menor\n",
    "            nívelg=int(linha[7])\n",
    "            indice=int((int(nívelg)-int(n))/10)\n",
    "            glucose[indice]=glucose[indice]+1\n",
    "   \n",
    "                \n",
    "    for l in glucose:\n",
    "        n = menor\n",
    "        k=n+9\n",
    "        gdiabetes.append(\"[\"+str(n)+\",\"+str(k)+\"]-\"+str(l))\n",
    "        menor = menor +10\n",
    "\n",
    "    for z in gdiabetes:\n",
    "        print(z)\n",
    "\n",
    "def tabelas(função,nome,número):\n",
    "    print(\"Tabela de distribuição por \"+nome)\n",
    "    print(\"--------------------------------\")\n",
    "    if número == 1:\n",
    "        distribuiçãoSexo(função)\n",
    "    if número == 2:\n",
    "        distribuiçãoIdade(função)\n",
    "    if número == 3:\n",
    "        distribuiçãoGlucose(função)\n",
    "\n",
    "\n",
    "menu = int(input(print(\"Que distribuição quer aceder:\\n1. Distribuição por sexo\\n2.Distribuição por idade\\n3. Distribuição por nível de glucose\\n 0: Sair\")))\n",
    "while menu != 0 :\n",
    "    if menu==1:\n",
    "        tabelas(\"diabetes_prediction_dataset.csv\",\"sexo\",1)\n",
    "        menu=(int(input(\"Que distribuição quer aceder a seguir?\")))\n",
    "    if menu==2:\n",
    "        tabelas(\"diabetes_prediction_dataset.csv\",\"idade\",2)\n",
    "        menu=(int(input(\"Que distribuição quer aceder a seguir?\")))\n",
    "    if menu==3:\n",
    "        tabelas(\"diabetes_prediction_dataset.csv\",\"nível de glucose\",3)\n",
    "        menu=(int(input(\"Que distribuição quer aceder a seguir?\")))\n",
    "print(\"Programa encerrado\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
